package isosegment_test_data

import (
	"github.com/pivotalservices/cf-mgmt/config"
	"github.com/pivotalservices/cf-mgmt/ldap"
	mock "github.com/pivotalservices/cf-mgmt/utils/mocks"
)

func PopulateWithTestData(utilsMgrMock *mock.MockUtilsManager) error {
	utilsMgrMock.MockFileData["./fixtures/0001/ldap.yml"] = ldap.Config{Enabled: false, LdapHost: "", LdapPort: 0, TLS: false, BindDN: "", BindPassword: "", UserSearchBase: "", UserNameAttribute: "", UserMailAttribute: "", UserObjectClass: "", GroupSearchBase: "", GroupAttribute: "", Origin: "ldap"}
	utilsMgrMock.MockFileData["./fixtures/0001/org1/org1space1/security-group.json"] = "[]"
	utilsMgrMock.MockFileData["./fixtures/0001/org1/org1space1/spaceConfig.yml"] = config.SpaceConfig{Org: "org1", Space: "org1space1", Developer: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Manager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Auditor: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, DeveloperGroup: "", ManagerGroup: "", AuditorGroup: "", AllowSSH: false, EnableSpaceQuota: false, MemoryLimit: 0, InstanceMemoryLimit: 0, TotalRoutes: 0, TotalServices: 0, PaidServicePlansAllowed: false, EnableSecurityGroup: false, SecurityGroupContents: "", RemoveUsers: true, TotalPrivateDomains: 0, TotalReservedRoutePorts: 0, TotalServiceKeys: 0, AppInstanceLimit: 0, IsoSegment: ""}
	utilsMgrMock.MockFileData["./fixtures/0001/org1/org1space2/security-group.json"] = "[]"
	utilsMgrMock.MockFileData["./fixtures/0001/org1/org1space2/spaceConfig.yml"] = config.SpaceConfig{Org: "org1", Space: "org1space2", Developer: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Manager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Auditor: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, DeveloperGroup: "", ManagerGroup: "", AuditorGroup: "", AllowSSH: false, EnableSpaceQuota: false, MemoryLimit: 0, InstanceMemoryLimit: 0, TotalRoutes: 0, TotalServices: 0, PaidServicePlansAllowed: false, EnableSecurityGroup: false, SecurityGroupContents: "", RemoveUsers: true, TotalPrivateDomains: 0, TotalReservedRoutePorts: 0, TotalServiceKeys: 0, AppInstanceLimit: 0, IsoSegment: "iso01"}
	utilsMgrMock.MockFileData["./fixtures/0001/org1/orgConfig.yml"] = config.OrgConfig{Org: "org1", BillingManagerGroup: "", ManagerGroup: "", AuditorGroup: "", BillingManager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Manager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Auditor: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, PrivateDomains: []string{}, RemovePrivateDomains: true, EnableOrgQuota: false, MemoryLimit: 0, InstanceMemoryLimit: 0, TotalRoutes: 0, TotalServices: 0, PaidServicePlansAllowed: false, RemoveUsers: true, TotalPrivateDomains: 0, TotalReservedRoutePorts: 0, TotalServiceKeys: 0, AppInstanceLimit: 0, DefaultIsoSegment: ""}
	utilsMgrMock.MockFileData["./fixtures/0001/org1/spaces.yml"] = config.Spaces{Org: "org1", Spaces: []string{"org1space1", "org1space2"}, EnableDeleteSpaces: true}
	utilsMgrMock.MockFileData["./fixtures/0001/org2/org2space1/security-group.json"] = "[]"
	utilsMgrMock.MockFileData["./fixtures/0001/org2/org2space1/spaceConfig.yml"] = config.SpaceConfig{Org: "org2", Space: "org2space1", Developer: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Manager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Auditor: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, DeveloperGroup: "", ManagerGroup: "", AuditorGroup: "", AllowSSH: false, EnableSpaceQuota: false, MemoryLimit: 0, InstanceMemoryLimit: 0, TotalRoutes: 0, TotalServices: 0, PaidServicePlansAllowed: false, EnableSecurityGroup: false, SecurityGroupContents: "", RemoveUsers: true, TotalPrivateDomains: 0, TotalReservedRoutePorts: 0, TotalServiceKeys: 0, AppInstanceLimit: 0, IsoSegment: ""}
	utilsMgrMock.MockFileData["./fixtures/0001/org2/orgConfig.yml"] = config.OrgConfig{Org: "org2", BillingManagerGroup: "", ManagerGroup: "", AuditorGroup: "", BillingManager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Manager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Auditor: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, PrivateDomains: []string{}, RemovePrivateDomains: true, EnableOrgQuota: false, MemoryLimit: 0, InstanceMemoryLimit: 0, TotalRoutes: 0, TotalServices: 0, PaidServicePlansAllowed: false, RemoveUsers: true, TotalPrivateDomains: 0, TotalReservedRoutePorts: 0, TotalServiceKeys: 0, AppInstanceLimit: 0, DefaultIsoSegment: "iso00"}
	utilsMgrMock.MockFileData["./fixtures/0001/org2/spaces.yml"] = config.Spaces{Org: "org2", Spaces: []string{"org2space1"}, EnableDeleteSpaces: true}
	utilsMgrMock.MockFileData["./fixtures/0001/orgs.yml"] = config.Orgs{Orgs: []string{"org1", "org2"}, EnableDeleteOrgs: true, ProtectedOrgs: []string{"system"}}
	utilsMgrMock.MockFileData["./fixtures/0001/spaceDefaults.yml"] = config.SpaceConfig{Org: "", Space: "", Developer: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Manager: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, Auditor: config.UserMgmt{LDAPUsers: []string{}, Users: []string{}, SamlUsers: []string(nil), LDAPGroup: "", LDAPGroups: []string{}}, DeveloperGroup: "", ManagerGroup: "", AuditorGroup: "", AllowSSH: false, EnableSpaceQuota: false, MemoryLimit: 0, InstanceMemoryLimit: 0, TotalRoutes: 0, TotalServices: 0, PaidServicePlansAllowed: false, EnableSecurityGroup: false, SecurityGroupContents: "", RemoveUsers: false, TotalPrivateDomains: 0, TotalReservedRoutePorts: 0, TotalServiceKeys: 0, AppInstanceLimit: 0, IsoSegment: ""}

	return nil
}
