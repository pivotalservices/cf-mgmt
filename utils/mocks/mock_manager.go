// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pivotalservices/cf-mgmt/utils (interfaces: Manager)

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

//DeleteDirectory - deletes a directory
func (m *MockManager) DeleteDirectory(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteDirectory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDirectory indicates an expected call of DeleteDirectory
func (mr *MockManagerMockRecorder) DeleteDirectory(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockManager)(nil).DeleteDirectory), arg0)
}

// FileOrDirectoryExists mocks base method
func (m *MockManager) FileOrDirectoryExists(arg0 string) bool {
	ret := m.ctrl.Call(m, "FileOrDirectoryExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

//LoadFileBytes - Load a file and return the bytes
func (m *MockManager) LoadFileBytes(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "LoadFileBytes", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

//LoadFileBytes - Load a file and return the bytes
func (mr *MockManagerMockRecorder) LoadFileBytes(arg0 string) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFileBytes", reflect.TypeOf((*MockManager)(nil).LoadFileBytes), arg0)
}

// FileOrDirectoryExists indicates an expected call of FileOrDirectoryExists
func (mr *MockManagerMockRecorder) FileOrDirectoryExists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileOrDirectoryExists", reflect.TypeOf((*MockManager)(nil).FileOrDirectoryExists), arg0)
}

// FindFiles mocks base method
func (m *MockManager) FindFiles(arg0, arg1 string) ([]string, error) {
	ret := m.ctrl.Call(m, "FindFiles", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFiles indicates an expected call of FindFiles
func (mr *MockManagerMockRecorder) FindFiles(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFiles", reflect.TypeOf((*MockManager)(nil).FindFiles), arg0, arg1)
}

// LoadFile mocks base method
func (m *MockManager) LoadFile(arg0 string, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "LoadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFile indicates an expected call of LoadFile
func (mr *MockManagerMockRecorder) LoadFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFile", reflect.TypeOf((*MockManager)(nil).LoadFile), arg0, arg1)
}

// WriteFile mocks base method
func (m *MockManager) WriteFile(arg0 string, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockManagerMockRecorder) WriteFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockManager)(nil).WriteFile), arg0, arg1)
}

// WriteFileBytes mocks base method
func (m *MockManager) WriteFileBytes(arg0 string, arg1 []byte) error {
	ret := m.ctrl.Call(m, "WriteFileBytes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFileBytes indicates an expected call of WriteFileBytes
func (mr *MockManagerMockRecorder) WriteFileBytes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFileBytes", reflect.TypeOf((*MockManager)(nil).WriteFileBytes), arg0, arg1)
}
