// Code generated by go-bindata.
// sources:
// files/cf-mgmt.sh
// files/cf-mgmt.yml
// files/pipeline.yml
// files/vars-template.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesCfMgmtSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x2a\x4e\x2d\x51\xd0\x4d\xe5\x4a\x4e\x51\x48\xce\xcf\x4b\xcb\x4c\xd7\x2d\x4a\x2d\xc8\xe7\x4a\x4e\xd3\xcd\x4d\xcf\x2d\x51\x28\x4b\x2d\x2a\xce\xcc\xcf\x83\xf3\x55\x9c\xdd\xe2\x7d\xdd\x7d\x43\xe2\x9d\xfd\x7d\x7d\x1d\xfd\x5c\xb8\x00\x01\x00\x00\xff\xff\x22\x7d\xfc\x6e\x53\x00\x00\x00")

func filesCfMgmtShBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtSh,
		"files/cf-mgmt.sh",
	)
}

func filesCfMgmtSh() (*asset, error) {
	bytes, err := filesCfMgmtShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.sh", size: 83, mode: os.FileMode(493), modTime: time.Unix(1573223757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesCfMgmtYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcd\x6a\x03\x21\x14\x85\xf7\x3e\xc5\x25\xeb\xda\xec\xdd\x0d\x19\x13\x06\xe6\x27\xe8\x34\xa5\x2b\x11\x6b\x26\x92\x38\x8a\x3a\xa1\xa1\x34\xcf\x5e\x94\x10\xda\xdd\x3d\xdf\xc7\x39\x28\xc6\x18\xf9\x8b\x4c\x47\x17\x2c\x81\x8b\x99\x97\x2f\x84\x8c\x95\x93\x16\x41\x47\xb7\x04\xa5\x09\x02\x48\x37\xaf\x09\x7c\x3a\x75\xd6\x01\x17\x8d\x00\x1e\x1a\xbe\x83\xf6\x2e\x9a\xe4\xc2\x8d\x80\x37\x57\x97\xe4\x25\xea\x70\x35\x4a\xc7\xb5\x3a\x62\x3b\xd9\xf4\x02\x49\x4e\x04\x56\xf7\x03\x65\xbc\x19\xfa\xfb\xea\x07\x21\x33\xfb\x25\xc5\xbc\x8f\x61\x96\x56\x13\x50\x6e\x3e\x9a\x09\xe7\x41\x84\xbc\x0c\xd2\x16\xcd\x3f\xf8\x48\x3b\x51\x0f\x5d\xd5\xf4\x19\xbc\x71\xca\x44\x53\xe7\x73\x5f\x71\xfe\x3e\xb0\x72\x6f\x86\x7e\xdb\xec\x44\xdd\xb0\x92\xda\x86\xf6\xa3\xe0\x74\xc3\xe8\x98\x41\x5b\x57\x7b\x91\xab\xcf\xf0\xb7\x5c\x00\xa7\xec\xf0\xf0\xc3\x4e\xb4\xf4\x40\xdb\x32\xb5\x15\xdd\xae\x1b\xc5\x66\xe8\xba\xaa\xaf\x09\x0a\xcb\x9c\xb9\x97\xe9\xf4\xef\xd5\x6b\x65\xd6\x49\xc6\xf3\xf3\xe3\xaf\xf1\x84\x7e\x03\x00\x00\xff\xff\x4c\x6f\xbb\xac\x65\x01\x00\x00")

func filesCfMgmtYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesCfMgmtYml,
		"files/cf-mgmt.yml",
	)
}

func filesCfMgmtYml() (*asset, error) {
	bytes, err := filesCfMgmtYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/cf-mgmt.yml", size: 357, mode: os.FileMode(420), modTime: time.Unix(1573223757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesPipelineYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\xcb\x6f\xfa\x38\x10\xc7\xef\xfc\x15\x23\xf6\x02\x12\xd9\xde\x73\x43\x25\xad\x90\x78\x54\xc0\x76\xb5\xaa\x2a\xcb\x4d\x86\xe0\xdd\xbc\xd6\x76\xa8\xf8\xef\x57\x0e\x69\x48\x9c\x84\xf7\xea\x57\xa9\xbe\x55\x78\x32\x33\xf9\x7e\x3c\x93\xb1\xcb\x51\xc4\x29\x77\x51\xd8\x1d\x0b\x22\x1a\xa2\x0d\x6e\x1c\xad\x99\x6f\x71\x4c\xe2\x0e\x80\xdc\x25\x68\x83\xcf\x64\x07\x60\x6f\x6a\x77\x00\x00\x52\xce\x6c\xe8\xf5\x7c\x26\x89\xb2\x24\x29\x67\xfd\x7e\xb6\xf2\xc1\x69\xe4\x6e\x2a\x8b\xfb\x9f\xf2\xf5\xdf\x20\x8e\x82\x1d\x7c\x52\xe9\x6e\x60\x1d\x73\x70\x37\x34\xf2\x51\x00\x8b\xf2\xd8\xe0\x31\x8e\xae\x8c\xf9\x2e\x7b\x20\xa1\x72\x23\x6c\x78\xeb\xba\xac\x3b\x80\x6e\xaf\xb7\xb7\x22\x1e\xe3\xfd\x7e\xf7\xbd\x48\x5c\xb2\x10\x2d\xc9\x99\xef\x23\x2f\x32\x57\x3f\x6a\xa9\xb3\x48\x22\xdf\xd2\x40\xa5\x58\x7e\xa6\xdf\xef\x74\xfe\x8e\x3f\xca\x52\x70\xa4\x12\xad\x98\xfb\xa2\x03\x90\x04\x34\x52\x1e\x2c\xf0\x51\xea\x3a\x01\xe4\x5e\x6c\x90\x3c\xc5\xcc\x4c\x52\xf1\x8f\xee\x04\x60\xcd\x82\xaa\xca\x0f\x2e\x7b\x50\xa6\xe2\xc1\x5d\x5b\xa1\x1f\xca\xdf\x77\x61\x90\xbf\x39\xa7\xa1\xd8\x67\x0d\xb0\xfc\x6b\xb9\x72\xa6\x64\x34\x9f\x0e\xc7\x33\x95\xbc\xd8\x09\x89\x21\xf1\xe2\x90\xb2\x28\x57\x17\xe0\x8f\xa5\xb3\x20\xe3\x91\x32\x48\x05\x72\xc2\xbc\x62\xe9\x65\xb8\x5c\xfe\x39\x5f\x64\x6b\x09\x15\xe2\x33\xe6\x87\xc5\xc7\xf9\xec\x69\xfc\x4c\x46\xe3\x85\x5a\x2e\x6b\xfc\x65\x30\x19\x3b\xb3\x15\x59\x3a\x8f\x0b\x67\x95\xd9\x04\x0c\x23\x49\x04\xba\x1c\x65\x61\x36\x99\x3f\x93\x89\xf3\xea\x4c\x94\x49\x10\xfb\x24\xc0\x2d\x06\x07\x2f\x4f\x64\xfa\x3c\x5d\x91\xc7\xf9\x74\x3a\x9c\x8d\xaa\xfa\x14\xca\x8b\x0d\xe5\xe8\x59\xfb\x57\xbb\x41\xfc\x9a\x1f\xa3\xbf\xae\xbf\x26\x91\xbe\xf9\x05\xba\x29\x67\x72\x67\xf9\x3c\x4e\x93\xdb\xeb\xa0\xee\xcf\x20\x69\x29\x09\x5d\xaa\x02\x0d\x15\x82\xf9\x91\xe5\xe1\x9a\xa6\x81\xbc\x1d\x91\x92\x55\x08\xf4\x6c\x78\x6b\x0e\xfd\x5e\xe2\x78\x32\xb8\xe1\xa9\xf3\x3c\x21\x59\xc1\xd5\xc3\x00\xaf\xfe\xde\xd4\x21\x2a\x3f\xef\x07\x07\xda\xf7\xb1\xbd\x52\xab\x69\x18\x9c\x3a\xce\xb2\x3e\x05\xbb\x34\xf1\xbe\x34\xb7\x42\x94\xd4\xa3\x92\x9e\x86\xd8\x86\xac\x1d\x4e\x4b\x1c\x43\x49\xa7\xd4\x28\x54\xc3\x68\x67\x25\x9c\x6d\xd5\xdf\x67\x0f\x1b\x97\x43\x3b\x1a\xcd\xa0\x6b\x1f\x09\x6b\x72\x1d\x26\x44\xe4\x5b\xe6\xa2\x45\x5d\x17\xc5\xff\x02\xad\x16\xc1\x80\xaa\xcd\x8e\x55\x89\xaa\xe3\xfb\xdd\x8a\x4b\x77\x72\x02\xdb\x91\xd8\x86\x60\xe3\xf4\x7f\xbc\xd2\xbe\x46\xc2\x84\xba\x78\x65\xa1\x0d\x4a\xdd\xd8\x52\xba\x9c\xd7\x2f\x8b\x90\x86\x5b\xdb\x11\x61\xaf\x90\x3e\x41\xde\xc6\xaa\xe2\xbb\x0d\xd4\x55\x23\xa5\x01\x7a\x6a\xa8\xd4\x81\xe6\x75\x73\x2d\xd0\x7b\x32\xd4\x53\x31\x0c\x5b\x46\xce\xa3\x0c\x6f\x38\x1c\x1c\x87\xd9\x00\xc9\x1c\x10\xce\xa6\xd5\x70\x44\x28\xaf\xef\x3f\x5a\xdf\xa7\xfe\x8a\x7c\x7e\x00\xd6\xd1\xf0\x85\xa8\x24\x32\xac\x1e\x4d\x88\x4a\xa3\xba\x5c\x4e\x24\x33\xa9\x65\x93\x99\x2d\x9d\xc5\x6b\xc9\x8f\x9a\x5e\xcb\x9e\x6e\xd8\x3f\x39\x8f\xe6\xbd\xf3\x6f\x1a\x4b\x7a\xf7\xcd\xd3\xb0\x29\x8a\x40\x3f\x60\x57\xdc\x02\x2b\xd7\xa9\x99\xd6\xc5\xb7\xa9\xcd\xd8\x06\xed\x37\xa9\x67\xd2\x34\x37\xab\x17\x62\x6d\xbd\x57\xd5\x0f\x1f\xf7\xbd\x2d\xb8\xaa\x8b\x97\x73\xf9\x01\x58\xbf\x79\x0f\x3f\xd0\x68\xda\x33\xd7\xf6\xef\x4b\x2e\x73\x4d\xef\x3e\x0b\x92\xde\xb9\x99\x88\x03\x2a\x59\x1c\x59\x02\xfd\x10\x23\x79\xb7\x7f\x9c\x34\x1c\x83\x2f\x2d\xf5\xc6\xe4\x7e\x29\xde\x33\x01\x9d\x04\x7d\x29\xc1\x06\x25\x0e\xd7\x4b\x01\xd2\x28\x4d\xae\xea\xce\x7a\xf9\x0e\xea\x33\xd9\x7d\xba\x76\x53\x92\xa6\x50\x6b\x97\x52\x35\x95\xfe\x0b\x00\x00\xff\xff\x51\x97\xb1\xf2\x60\x24\x00\x00")

func filesPipelineYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesPipelineYml,
		"files/pipeline.yml",
	)
}

func filesPipelineYml() (*asset, error) {
	bytes, err := filesPipelineYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/pipeline.yml", size: 9312, mode: os.FileMode(420), modTime: time.Unix(1573223757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVarsTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\x4d\x6b\xdb\x4c\x10\xbe\xef\xaf\x78\x88\xcf\x7e\xc3\x7b\xe8\xc5\xb7\x10\x3b\xc5\x50\x92\x10\xda\xb3\x58\xef\x8e\xd6\x53\xf6\x43\xcc\x8e\x6c\x74\xc9\x6f\x2f\x2b\xc9\x2d\x81\x42\x21\x27\x31\xa3\xe7\x6b\x66\x67\x83\xa9\x8c\x82\xc0\x0a\xa1\xa1\x60\x14\x36\x81\xb5\x6b\x45\x37\x0a\xef\x70\x77\xf7\xa7\x71\x12\x9b\xdd\x79\x87\x64\xab\x92\x98\x95\xec\x7a\xd4\xa9\x2a\x25\xf8\x92\x2c\x67\xb3\x54\xdd\x52\xcd\x0a\x1b\x8c\x95\x04\xd6\xb9\x32\x66\xc5\x95\xf5\x8c\x81\x24\x71\xad\x5c\x32\xb4\xc0\x09\x59\x25\x14\x09\xf5\xbe\x0e\xd6\x51\x35\x8d\xd2\xb1\x5f\x05\xf6\x87\xd7\xb7\xc3\xe3\xc3\xf7\xc3\x1e\x5b\xfc\xa8\x04\x17\x99\xb2\x76\x95\x9c\x90\x62\x8b\xc1\xd6\x7a\x2d\xe2\x51\xfa\xcf\xb8\xdd\xe8\xab\xdd\xa2\x8e\x55\xbd\x2f\x82\xd1\xda\xe5\xbb\xc4\x32\x1f\xfc\x67\x96\xd9\x20\x96\x10\x38\x07\x44\xba\x50\x9c\xe1\xae\xdf\xa6\x90\x14\xae\xa4\x64\xb3\xaf\xe0\x0c\x3d\x13\x06\x1e\x28\x72\x26\x13\x4b\xe8\x66\xf8\x0e\xc7\xe7\xa7\x17\xb3\x81\x72\x22\x70\x56\x92\x8b\x8d\x2d\xae\x0a\x87\x40\x82\x71\xf0\x56\xe9\xde\x53\x24\x25\xfc\x2c\xa7\x8a\x92\x4d\x83\x6f\x57\xc8\x0e\xff\x7f\x49\x2d\x88\x2b\xb9\xe7\x30\x8a\xd5\x36\xb2\x67\x21\xa7\x45\x26\xb3\xf4\x3b\xcf\xb2\xc3\xfb\xe3\xcb\xf3\xd3\xf1\xeb\xfe\xf8\xf6\xde\x28\x36\xc6\x72\x45\x1d\xc8\x71\x3f\xcd\x43\x78\x3b\xa0\x92\x5c\x48\x5a\xea\x5b\x62\x5c\xe6\x21\xda\xdf\xff\xa6\x14\x51\x72\x9c\x90\x89\x3c\x79\x70\xdb\x7d\xe3\x7e\xdb\x3f\xbc\x9a\x06\xe9\x16\x81\xdb\x82\xfe\x6e\x72\xe2\xec\x97\x47\xfb\xbc\x4f\xa3\xdf\x5c\x7e\xdf\x82\x96\x45\x5b\xcb\x62\xb4\xfd\x97\xca\x87\x33\xf8\x15\x00\x00\xff\xff\xe3\xdf\xae\x7b\x1e\x03\x00\x00")

func filesVarsTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVarsTemplateYml,
		"files/vars-template.yml",
	)
}

func filesVarsTemplateYml() (*asset, error) {
	bytes, err := filesVarsTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vars-template.yml", size: 798, mode: os.FileMode(420), modTime: time.Unix(1573223757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/cf-mgmt.sh": filesCfMgmtSh,
	"files/cf-mgmt.yml": filesCfMgmtYml,
	"files/pipeline.yml": filesPipelineYml,
	"files/vars-template.yml": filesVarsTemplateYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"cf-mgmt.sh": &bintree{filesCfMgmtSh, map[string]*bintree{}},
		"cf-mgmt.yml": &bintree{filesCfMgmtYml, map[string]*bintree{}},
		"pipeline.yml": &bintree{filesPipelineYml, map[string]*bintree{}},
		"vars-template.yml": &bintree{filesVarsTemplateYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

